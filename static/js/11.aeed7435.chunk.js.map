{"version":3,"sources":["assets/styles/Dashboard/index.ts","assets/images/logo.svg","components/layout/AppBar/TopAppBar/TopAppBarContext.tsx","components/layout/AppBar/TopAppBar/useAppBar.tsx","assets/styles/ui/AppBar/topAppBar.ts","components/layout/AppBar/TopAppBar/index.tsx","components/layout/AppBar/BottomAppBar/index.tsx","components/layout/AppBar/index.tsx","assets/styles/ui/sidebar.ts","components/layout/Sidebar/index.tsx","views/Dashboard/components/adminDashboard.tsx","views/Dashboard/components/userDashboard.tsx","views/Dashboard/routes.ts","views/Dashboard/components/drawerList.tsx","views/Dashboard/layouts/adminLayout.tsx","views/Dashboard/layouts/userLayout.tsx","views/Dashboard/index.tsx"],"names":["DRAWER_WIDTH","useStyles","makeStyles","theme","createStyles","root","display","appBarSpacer","mixins","toolbar","container","paddingTop","spacing","paddingBottom","content","flexGrow","height","overflow","module","exports","initialContext","setHeading","heading","TopAppBarContext","createContext","TopAppBarCtxProvider","children","useState","Provider","value","useAppBar","useContext","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","language","margin","breakpoints","up","logo","maxWidth","paddingRight","loginButton","float","menuButton","marginRight","menuButtonHidden","rightToolbar","title","textAlign","TopAppBar","isAuthenticated","open","isDrawerToggled","openDrawer","useTranslation","t","i18n","profileMenu","setProfileMenu","languageMenu","setLanguageMenu","history","useHistory","location","useLocation","handleProfileMenuClose","handleLanguageMenuClose","classes","AppBar","position","className","clsx","Toolbar","Link","component","RouterLink","to","src","Logo","alt","IconButton","edge","color","aria-label","onClick","Typography","variant","noWrap","Tooltip","enterDelay","Button","aria-owns","undefined","event","currentTarget","data-ga-event-category","data-ga-event-action","LANGUAGES","filter","code","text","fontSize","Menu","id","anchorEl","Boolean","onClose","map","MenuItem","key","selected","lang","changeLanguage","handleLanguageChange","Box","my","Divider","data-no-link","href","rel","target","hrefLang","pathname","aria-controls","aria-haspopup","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","logout","defaultProps","BottomAppBar","type","drawerPaper","whiteSpace","backgroundColor","fade","palette","primary","main","drawerPaperClose","overflowX","drawerItem","profileAvatar","profileName","marginTop","profileRoot","flexDirection","alignItems","minHeight","toolbarIcon","justifyContent","padding","Profile","session","useSession","Collapse","in","Avatar","fullName","charAt","role","startCase","Sidebar","closeDrawer","navItems","Drawer","paper","List","AdminDashboard","UserDashboard","routeName","useEffect","adminDashboardRoutes","path","name","sidebar","icon","DashboardIcon","userDashboardRoutes","AdminNavigationItems","url","useRouteMatch","adminRoutes","route","routeItem","ListItem","button","replace","ListItemIcon","ListItemText","UserNavigationItems","userRoutes","AdminLayout","Container","routes","exact","from","UserLayout","Dashboard","setOpen","isAdmin","useRef","isAdminType","current","isAdminUser","authenticated"],"mappings":"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","file":"static/js/11.aeed7435.chunk.js","sourcesContent":["/**\n * Dashboard styles\n */\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const DRAWER_WIDTH = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\"\n        },\n        appBarSpacer: theme.mixins.toolbar,\n        container: {\n            paddingTop: theme.spacing(4),\n            paddingBottom: theme.spacing(4)\n        },\n        content: {\n            flexGrow: 1,\n            height: \"100vh\",\n            overflow: \"auto\"\n        }\n    })\n);\n\nexport default useStyles;\n","module.exports = __webpack_public_path__ + \"static/media/logo.176e421a.svg\";","import React, {\n    FC,\n    createContext,\n    Dispatch,\n    ReactNode,\n    useState,\n    SetStateAction\n} from \"react\";\n\ninterface ITopAppBarContextProps {\n    heading: string;\n    setHeading: (heading: string) => void | Dispatch<SetStateAction<string>>;\n}\n\nconst DEFAULT_HEADING = \"Dashboard\";\n\nconst initialContext: ITopAppBarContextProps = {\n    setHeading: () => {},\n    heading: DEFAULT_HEADING\n};\n\nexport const TopAppBarContext = createContext<ITopAppBarContextProps>(initialContext);\n\ninterface ITopAppBarCtxProviderProps {\n    children: ReactNode;\n}\n\nconst TopAppBarCtxProvider: FC<ITopAppBarCtxProviderProps> = ({ children }) => {\n    // TopAppbar Header\n    const [heading, setHeading] = useState(DEFAULT_HEADING);\n\n    return (\n        <TopAppBarContext.Provider value={{ setHeading, heading }}>\n            {children}\n        </TopAppBarContext.Provider>\n    );\n};\n\nexport default TopAppBarCtxProvider;\n","/**\n * ------------ useAppBar custom react hook -----------------\n *\n * Description:   A Custom hook used to update the content on\n *                AppBar/TopAppbar component.\n *\n * Methods to use\n * -------------------------------------------\n * ```\n *    import useAppBar from \"src/components/layout/AppBar/TopAppBar\"\n *\n *    ...(Inside functional component)\n *    const { setHeading, heading } = useAppBar();\n *\n *    setHeading(\"Dashboard\");\n * ```\n * You can modify configurations inside \"./TopAppbarContext\"\n */\nimport { useContext } from \"react\";\n\nimport { TopAppBarContext } from \"./TopAppBarContext\";\n\nexport const useAppBar = () => useContext(TopAppBarContext);\n","/**\n * Top App Bar styles\n */\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { DRAWER_WIDTH } from \"assets/styles/Dashboard\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            transition: theme.transitions.create([\"width\", \"margin\"], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen\n            })\n        },\n        appBarShift: {\n            marginLeft: DRAWER_WIDTH,\n            width: `calc(100% - ${DRAWER_WIDTH}px)`,\n            transition: theme.transitions.create([\"width\", \"margin\"], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen\n            })\n        },\n        language: {\n            margin: theme.spacing(0, 0.5, 0, 1),\n            display: \"none\",\n            [theme.breakpoints.up(\"md\")]: {\n                display: \"block\"\n            }\n        },\n        logo: {\n            maxWidth: \"50px\",\n            paddingRight: 15\n        },\n        loginButton: {\n            float: \"right\"\n        },\n        menuButton: {\n            marginRight: 36\n        },\n        menuButtonHidden: {\n            display: \"none\"\n        },\n        // This group of buttons will be aligned to the right\n        rightToolbar: {\n            marginLeft: \"auto\",\n            marginRight: -12\n        },\n        title: {\n            flexGrow: 1,\n            textAlign: \"left\"\n        },\n        toolbar: {\n            paddingRight: 24 // Keep right padding when drawer closed\n        }\n    })\n);\n\nexport default useStyles;\n","/**\n * The TopAppBar provides content and actions related to the current screen.\n * It’s used for branding, screen titles, navigation, and actions.\n * Read more: https://material.io/components/app-bars-top\n */\nimport React, { FC, useState, MouseEvent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, Link as RouterLink, useLocation } from \"react-router-dom\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Link from \"@material-ui/core/Link\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport LanguageIcon from \"@material-ui/icons/Translate\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport Logo from \"assets/images/logo.svg\";\n\nimport { useAppBar } from \"./useAppBar\";\n\nimport { LANGUAGES } from \"i18n\";\n\nimport clsx from \"clsx\";\nimport useStyles from \"assets/styles/ui/AppBar/topAppBar\";\n\nimport { logout } from \"session/auth\";\n\ninterface ITopAppBarProps {\n    // Drawer open/close triggering function\n    openDrawer?: () => void;\n    // Flag to indicate drawer opened/closed\n    isDrawerToggled?: boolean;\n    // Flag to indicate authenticated state. Renders a plain AppBar if not authenticated.\n    isAuthenticated?: boolean;\n}\n\nconst TopAppBar: FC<ITopAppBarProps> = ({\n    isAuthenticated,\n    isDrawerToggled: open,\n    openDrawer\n}) => {\n    const { t, i18n } = useTranslation();\n\n    const [profileMenu, setProfileMenu] = useState<null | HTMLElement>(null);\n    const [languageMenu, setLanguageMenu] = useState<null | HTMLElement>(null);\n\n    const history = useHistory();\n\n    const { heading } = useAppBar();\n\n    let location = useLocation();\n\n    const handleProfileMenu = (event: MouseEvent<HTMLElement>) => {\n        setProfileMenu(event.currentTarget);\n    };\n\n    const handleProfileMenuClose = () => {\n        setProfileMenu(null);\n    };\n\n    const handleLanguageMenuClick = (event: MouseEvent<HTMLElement>) => {\n        setLanguageMenu(event.currentTarget);\n    };\n\n    const handleLanguageChange = (language: string) => {\n        handleLanguageMenuClose();\n        i18n.changeLanguage(language);\n    };\n\n    const handleLanguageMenuClose = () => {\n        setLanguageMenu(null);\n    };\n\n    const handleUserLogout = () => {\n        logout(history, \"/\");\n    };\n\n    const classes = useStyles();\n    return (\n        <AppBar\n            position=\"absolute\"\n            className={\n                isAuthenticated\n                    ? clsx(classes.appBar, open && classes.appBarShift)\n                    : classes.appBar\n            }>\n            <Toolbar className={classes.toolbar}>\n                {!open && (\n                    <Link component={RouterLink} to=\"/\">\n                        <img src={Logo} alt=\"logo\" className={classes.logo} />\n                    </Link>\n                )}\n                {isAuthenticated && (\n                    <>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            onClick={openDrawer}\n                            className={clsx(\n                                classes.menuButton,\n                                open && classes.menuButtonHidden\n                            )}>\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography\n                            component=\"h1\"\n                            variant=\"h6\"\n                            color=\"inherit\"\n                            noWrap\n                            className={classes.title}>\n                            {/* TODO - Language Translation for this */}\n                            {t(`drawer.${heading}`)}\n                        </Typography>\n                    </>\n                )}\n                <section className={classes.rightToolbar}>\n                    <Tooltip\n                        title={t(\"general.changeLanguage\") || \"Change Language\"}\n                        enterDelay={300}>\n                        <Button\n                            color=\"inherit\"\n                            aria-owns={languageMenu ? \"language-menu\" : undefined}\n                            aria-label={t(\"general.changeLanguage\")}\n                            onClick={handleLanguageMenuClick}\n                            data-ga-event-category=\"header\"\n                            data-ga-event-action=\"language\">\n                            <LanguageIcon />\n                            <span className={classes.language}>\n                                {\n                                    LANGUAGES.filter(\n                                        language => language.code === i18n.language\n                                    )[0].text\n                                }\n                            </span>\n                            <ExpandMoreIcon fontSize=\"small\" />\n                        </Button>\n                    </Tooltip>\n                    <Menu\n                        id=\"language-menu\"\n                        anchorEl={languageMenu}\n                        open={Boolean(languageMenu)}\n                        onClose={handleLanguageMenuClose}>\n                        {LANGUAGES.map(language => (\n                            <MenuItem\n                                key={language.code}\n                                selected={i18n.language === language.code}\n                                lang={language.code}\n                                onClick={() => {\n                                    handleLanguageChange(language.code);\n                                }}>\n                                {language.text}\n                            </MenuItem>\n                        ))}\n                        <Box my={1}>\n                            <Divider />\n                        </Box>\n                        <MenuItem\n                            component=\"a\"\n                            data-no-link=\"true\"\n                            href=\"https://github.com/xXZang3tsuXx/react-material-dashboard\"\n                            rel=\"noopener nofollow\"\n                            target=\"_blank\"\n                            key={i18n.language}\n                            lang={i18n.language}\n                            hrefLang=\"en\"\n                            onClick={handleLanguageMenuClose}>\n                            {t(\"helpToTranslate\")}\n                        </MenuItem>\n                    </Menu>\n                    {!isAuthenticated && location.pathname !== \"/login\" && (\n                        <Button\n                            component={RouterLink}\n                            className={classes.loginButton}\n                            color=\"inherit\"\n                            to=\"/login\">\n                            {t(\"general.login\", \"Login\")}\n                        </Button>\n                    )}\n                </section>\n                {isAuthenticated && (\n                    <section className={classes.rightToolbar}>\n                        <IconButton\n                            aria-label=\"account of current user\"\n                            aria-controls=\"menu-appbar\"\n                            aria-haspopup=\"true\"\n                            color=\"inherit\"\n                            onClick={handleProfileMenu}>\n                            <AccountCircle />\n                        </IconButton>\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={profileMenu}\n                            anchorOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"right\"\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"right\"\n                            }}\n                            open={Boolean(profileMenu)}\n                            onClose={handleProfileMenuClose}>\n                            <MenuItem onClick={handleProfileMenuClose}>Help</MenuItem>\n                            <MenuItem onClick={handleUserLogout}>Logout</MenuItem>\n                        </Menu>\n                    </section>\n                )}\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nTopAppBar.defaultProps = {\n    isAuthenticated: false,\n    isDrawerToggled: true\n};\n\nexport { useAppBar };\n\nexport default TopAppBar;\n","/**\n * A bottom app bar displaying navigation and key actions at the bottom of mobile screens.\n */\nimport React, { FC } from \"react\";\n\nconst BottomAppBar: FC = () => {\n    return <div>Bottom Tab Bar component will be updated here</div>;\n};\n\nexport default BottomAppBar;\n","/**\n * AppBar can be either positioned top or bottomed\n * TODO: Bottom AppBar should be displayed for mobile screens\n */\nimport React, { FC } from \"react\";\n\nimport TopAppBar from \"./TopAppBar\";\nimport BottomAppBar from \"./BottomAppBar\";\n\ninterface IAppBarProps {\n    /**\n     * Drawer open/close triggering function\n     */\n    openDrawer?: () => void;\n    /**\n     * Flag to indicate drawer opened/closed\n     */\n    isDrawerToggled?: boolean;\n    /**\n     * Flag to indicate authenticated state. Renders a plain AppBar if not authenticated.\n     */\n    isAuthenticated?: boolean;\n    /**\n     * Flag to indicate Bottom or Top App Bar\n     */\n    type: \"Bottom\" | \"Top\";\n}\n\nconst AppBar: FC<IAppBarProps> = ({\n    isAuthenticated,\n    isDrawerToggled,\n    openDrawer,\n    type\n}) => {\n    if (type === \"Top\") {\n        return (\n            <TopAppBar\n                isAuthenticated={isAuthenticated}\n                isDrawerToggled={isDrawerToggled}\n                openDrawer={openDrawer}\n            />\n        );\n    } else {\n        return <BottomAppBar />;\n    }\n};\n\nexport default AppBar;\n","/**\n * Sidebar/Drawer styles\n */\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport { DRAWER_WIDTH } from \"assets/styles/Dashboard\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        drawerPaper: {\n            position: \"relative\",\n            whiteSpace: \"nowrap\",\n            width: DRAWER_WIDTH,\n            transition: theme.transitions.create(\"width\", {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen\n            }),\n            backgroundColor: fade(theme.palette.primary.main, 1)\n        },\n        drawerPaperClose: {\n            overflowX: \"hidden\",\n            transition: theme.transitions.create(\"width\", {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen\n            }),\n            width: theme.spacing(7),\n            [theme.breakpoints.up(\"sm\")]: {\n                width: theme.spacing(9)\n            }\n        },\n        drawerItem: {\n            color: \"white\"\n        },\n        profileAvatar: {\n            width: 60,\n            height: 60\n        },\n        profileName: {\n            marginTop: theme.spacing(1),\n            fontSize: 16,\n            color: \"#fff\"\n        },\n        profileRoot: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            minHeight: \"fit-content\"\n        },\n        toolbarIcon: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"flex-end\",\n            padding: \"0 8px\",\n            ...theme.mixins.toolbar\n        }\n    })\n);\n\nexport default useStyles;\n","/**\n * Sidebar/Drawer layout component\n */\nimport React, { FC } from \"react\";\n\nimport {\n    Avatar,\n    Collapse,\n    Divider,\n    Drawer,\n    IconButton,\n    List,\n    Typography\n} from \"@material-ui/core\";\n\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\n\nimport { startCase } from \"lodash\";\n\nimport { useSession } from \"session/auth\";\n\nimport clsx from \"clsx\";\nimport useStyles from \"assets/styles/ui/sidebar\";\n\ntype SidebarProps = {\n    isDrawerToggled: boolean;\n    closeDrawer: () => void;\n    navItems: React.FC<any>;\n};\n\ntype SidebarProfile = {\n    display: boolean;\n};\n\nconst Profile: FC<SidebarProfile> = ({ display }) => {\n    const classes = useStyles();\n\n    const { session } = useSession();\n\n    const getUserFirstLetter = () => {\n        if (session && session.fullName) {\n            return (session.fullName as string).charAt(0);\n        }\n        return \"-\";\n    };\n\n    const getProfileRole = () => {\n        if (session && session.role) {\n            return startCase(session.role);\n        }\n        return \"\";\n    };\n\n    return (\n        <Collapse in={display}>\n            <div className={classes.profileRoot}>\n                <Avatar alt=\"Person\" className={classes.profileAvatar}>\n                    {getUserFirstLetter()}\n                </Avatar>\n                <Typography className={classes.profileName} variant=\"h6\">\n                    {`${session.fullName}`}\n                </Typography>\n                <Typography variant=\"body2\">{getProfileRole()}</Typography>\n            </div>\n        </Collapse>\n    );\n};\n\nconst Sidebar: FC<SidebarProps> = ({ isDrawerToggled: open, closeDrawer, navItems }) => {\n    const classes = useStyles();\n    return (\n        <Drawer\n            variant=\"permanent\"\n            classes={{\n                paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose)\n            }}\n            open={open}>\n            <div className={classes.toolbarIcon}>\n                <IconButton onClick={closeDrawer}>\n                    <ChevronLeftIcon />\n                </IconButton>\n            </div>\n            <Profile display={open} />\n            <Divider />\n            <List component={navItems} />\n        </Drawer>\n    );\n};\n\nexport default Sidebar;\n","import React, { FC } from \"react\";\n\ninterface IAdminDashboardProps {}\n\nconst AdminDashboard: FC<IAdminDashboardProps> = () => {\n    return (\n        <div>\n            <p>AdminDashboard content</p>\n        </div>\n    );\n};\n\nexport default AdminDashboard;\n","import React, { FC, useEffect } from \"react\";\nimport { useAppBar } from \"components/layout/AppBar/TopAppBar\";\n\ninterface IUserDashboardProps extends IComponentCommonProps {}\n\nconst UserDashboard: FC<IUserDashboardProps> = ({ routeName }) => {\n    const { setHeading } = useAppBar();\n\n    useEffect(() => {\n        setHeading(routeName);\n    }, [routeName, setHeading]);\n\n    return (\n        <div>\n            <p>UserDashboard content</p>\n        </div>\n    );\n};\n\nexport default UserDashboard;\n","/**\n * Dashboar Navigational Routes\n *\n * Remark:\n *    On Adding routes with same identities in id,\n *    For example: \"pay-runs/:id\" & \"pay-runs/new\",\n *    Place the latter (i.e \"pay-runs/new\") first before the arbitary id route.\n */\nimport { ComponentClass, FC } from \"react\";\n\nimport { SvgIconTypeMap } from \"@material-ui/core\";\nimport { OverridableComponent } from \"@material-ui/core/OverridableComponent\";\n\n/* Admin core components */\nimport AdminDashboard from \"views/Dashboard/components/adminDashboard\";\n\n/* User core components */\nimport UserDashboard from \"views/Dashboard/components/userDashboard\";\n\n/* Drawer Icons */\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\n\ninterface IRouteItemBasic {\n    /**\n     * Path to the route\n     */\n    path: string;\n    /**\n     * Name of the route\n     */\n    name: string;\n    /**\n     * Component to be rendered\n     */\n    component: ComponentClass<any, any> | FC<any>;\n}\n\ninterface IRoutesOnDrawer extends IRouteItemBasic {\n    /**\n     * Flag to indicate whether the route is displayed in sidebar drawer\n     * If true icon is mandatory.\n     */\n    sidebar: true;\n    /**\n     * Icon to be rendered in sidebar drawer\n     */\n    icon: OverridableComponent<SvgIconTypeMap>;\n}\n\ninterface IRoutesArbitary extends IRouteItemBasic {\n    /**\n     * Flag to indicate whether the route is displayed in sidebar drawer\n     * If true icon is mandatory.\n     */\n    sidebar: false;\n    /**\n     * Icon to be rendered in sidebar drawer\n     */\n    icon: never;\n}\n\nexport type RouteItem = IRouteItemBasic & (IRoutesOnDrawer | IRoutesArbitary);\n\nexport const adminDashboardRoutes: Array<RouteItem> = [\n    {\n        path: \"\",\n        name: \"Dashboard\",\n        component: AdminDashboard,\n        sidebar: true,\n        icon: DashboardIcon\n    }\n];\n\nexport const userDashboardRoutes: Array<RouteItem> = [\n    {\n        path: \"\",\n        name: \"Dashboard\",\n        component: UserDashboard,\n        sidebar: true,\n        icon: DashboardIcon\n    }\n];\n","/**\n * Sidebar Drawer List based on the routes\n */\nimport React, { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport { Link as RouterLink, useRouteMatch } from \"react-router-dom\";\n\nimport {\n    adminDashboardRoutes as adminRoutes,\n    userDashboardRoutes as userRoutes,\n    RouteItem\n} from \"views/Dashboard/routes\";\n\nimport useStyles from \"assets/styles/ui/sidebar\";\n\n// Admin Related Drawer Navigational routes\nexport const AdminNavigationItems: FC = () => {\n    const { url } = useRouteMatch();\n    const { t } = useTranslation();\n    const classes = useStyles();\n    return (\n        <>\n            {adminRoutes\n                .filter((route: RouteItem) => route.sidebar)\n                .map((routeItem: RouteItem, key: number) => {\n                    return (\n                        <ListItem\n                            button\n                            component={RouterLink}\n                            to={`${url}${routeItem.path}`}\n                            replace\n                            key={key}>\n                            <ListItemIcon>\n                                {<routeItem.icon className={classes.drawerItem} />}\n                            </ListItemIcon>\n                            <ListItemText\n                                className={classes.drawerItem}\n                                primary={t(`drawer.${routeItem.name}`)}\n                            />\n                        </ListItem>\n                    );\n                })}\n        </>\n    );\n};\n\n// User Related Drawer Navigational routes\nexport const UserNavigationItems: FC = () => {\n    const { url } = useRouteMatch();\n    const classes = useStyles();\n    return (\n        <>\n            {userRoutes\n                .filter((route: RouteItem) => route.sidebar)\n                .map((routeItem: RouteItem, key: number) => {\n                    return (\n                        <ListItem\n                            button\n                            component={RouterLink}\n                            to={`${url}${routeItem.path}`}\n                            replace\n                            key={key}>\n                            <ListItemIcon>\n                                {<routeItem.icon className={classes.drawerItem} />}\n                            </ListItemIcon>\n                            <ListItemText\n                                className={classes.drawerItem}\n                                primary={routeItem.name}\n                            />\n                        </ListItem>\n                    );\n                })}\n        </>\n    );\n};\n","/**\n * Admin Dashboard Layout\n */\nimport React, { FC } from \"react\";\nimport { Route, useRouteMatch, Switch, Redirect } from \"react-router-dom\";\n\nimport Container from \"@material-ui/core/Container\";\n\nimport useStyles from \"assets/styles/Dashboard\";\n\nimport { adminDashboardRoutes as routes, RouteItem } from \"views/Dashboard/routes\";\n\nconst AdminLayout: FC = () => {\n    const classes = useStyles();\n\n    let { path } = useRouteMatch();\n\n    return (\n        <Container maxWidth=\"lg\" className={classes.container}>\n            <Switch>\n                {routes.map((routeItem: RouteItem, key: number) => {\n                    return routeItem.sidebar ? (\n                        <Route\n                            exact\n                            path={`${path}${routeItem.path}`}\n                            component={() => (\n                                <routeItem.component routeName={routeItem.name} />\n                            )}\n                            key={key}\n                        />\n                    ) : (\n                        <Route\n                            path={`${path}${routeItem.path}`}\n                            component={() => (\n                                <routeItem.component routeName={routeItem.name} />\n                            )}\n                            key={key}\n                        />\n                    );\n                })}\n                {/* Redirect to \"URL/#/dashboard\" on invalid paths entered as \"URL/#/dashboard/INVALID\" */}\n                <Redirect from=\"/dashboard\" to=\"/dashboard\" />\n            </Switch>\n        </Container>\n    );\n};\n\nexport default AdminLayout;\n","/**\n * user Dashboard Layout\n */\nimport React, { FC } from \"react\";\nimport { Route, useRouteMatch, Switch, Redirect } from \"react-router-dom\";\n\nimport Container from \"@material-ui/core/Container\";\n\nimport useStyles from \"assets/styles/Dashboard\";\n\nimport { userDashboardRoutes as routes, RouteItem } from \"views/Dashboard/routes\";\n\nconst UserLayout: FC = () => {\n    const classes = useStyles();\n\n    let { path } = useRouteMatch();\n    return (\n        <Container maxWidth=\"lg\" className={classes.container}>\n            <Switch>\n                {routes.map((routeItem: RouteItem, key: number) => {\n                    return routeItem.sidebar ? (\n                        <Route\n                            exact\n                            path={`${path}${routeItem.path}`}\n                            component={() => (\n                                <routeItem.component routeName={routeItem.name} />\n                            )}\n                            key={key}\n                        />\n                    ) : (\n                        <Route\n                            path={`${path}${routeItem.path}`}\n                            component={() => (\n                                <routeItem.component routeName={routeItem.name} />\n                            )}\n                            key={key}\n                        />\n                    );\n                })}\n                {/* Redirect to \"URL/#/dashboard\" on invalid paths entered as \"URL/#/dashboard/INVALID\" */}\n                <Redirect from=\"/dashboard\" to=\"/dashboard\" />\n            </Switch>\n        </Container>\n    );\n};\n\nexport default UserLayout;\n","import React, { FC, useState, useRef, useEffect } from \"react\";\n\nimport Appbar from \"components/layout/AppBar\";\nimport Sidebar from \"components/layout/Sidebar\";\n\nimport TopAppbarCtx from \"components/layout/AppBar/TopAppBar/TopAppBarContext\";\n\nimport { AdminNavigationItems, UserNavigationItems } from \"./components/drawerList\";\n\nimport AdminLayout from \"./layouts/adminLayout\";\nimport UserLayout from \"./layouts/userLayout\";\n\nimport { isAdminUser, isAdminType, authenticated } from \"session/auth\";\n\nimport useStyles from \"assets/styles/Dashboard\";\n\ninterface IDashboardProps {}\n\nconst Dashboard: FC<IDashboardProps> = () => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(true);\n\n    const isAdmin = useRef(isAdminType);\n\n    useEffect(() => {\n        isAdmin.current = isAdminUser();\n    }, []);\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            {/* TODO: There might be a memory leak occuring doing in this pattern. Fix this later */}\n            <TopAppbarCtx>\n                <Appbar\n                    type=\"Top\"\n                    isAuthenticated={authenticated}\n                    isDrawerToggled={open}\n                    openDrawer={handleDrawerOpen}\n                />\n                <Sidebar\n                    closeDrawer={handleDrawerClose}\n                    isDrawerToggled={open}\n                    navItems={\n                        isAdmin.current ? AdminNavigationItems : UserNavigationItems\n                    }\n                />\n                <main className={classes.content}>\n                    <div className={classes.appBarSpacer} />\n                    {isAdmin.current ? <AdminLayout /> : <UserLayout />}\n                </main>\n            </TopAppbarCtx>\n        </div>\n    );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}